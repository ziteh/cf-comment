---
import './CfCommentBox.css';
---

<link rel="stylesheet" href="./CfCommentBox.css" />

<div class="cf-container">
  <form id="comment-form">
    <input type="text" id="name" placeholder="姓名 (選填)" />
    <!-- <input type="email" id="email" placeholder="Email (選填)" /> -->
    <textarea id="message" placeholder="留言內容..." required></textarea>
    <div id="reply-info" style="display: none;">
      回覆給: <span id="reply-to-name"></span>
      <button type="button" id="cancel-reply">取消回覆</button>
    </div>
    <button type="submit">發送留言</button>
  </form>

  <div id="preview"></div>

  <div id="comments"></div>
</div>

<script type="module">
  const API_URL = 'http://localhost:8787/api';
  const POST = '/blog/my-post';

  const form = document.getElementById('comment-form');
  const preview = document.getElementById('preview');
  const messageInput = document.getElementById('message');
  const commentsEl = document.getElementById('comments');
  const replyInfo = document.getElementById('reply-info');
  const replyToName = document.getElementById('reply-to-name');
  const cancelReplyBtn = document.getElementById('cancel-reply');

  let currentReplyTo = null;
  const render = (md) => DOMPurify.sanitize(snarkdown(md));

  function formatDate(timestamp) {
    const date = new Date(timestamp);

    const y = date.getFullYear();
    const m = String(date.getMonth() + 1).padStart(2, '0');
    const d = String(date.getDate()).padStart(2, '0');

    let hour = date.getHours();
    const minute = String(date.getMinutes()).padStart(2, '0');
    const period = hour >= 12 ? 'PM' : 'AM';

    hour = hour % 12;
    if (hour === 0) hour = 12; // 0 => 12 AM or 12 PM
    const h = String(hour).padStart(2, '0');

    return `${y}/${m}/${d} ${h}:${minute} ${period}`;
  }

  messageInput.addEventListener('input', () => {
    preview.innerHTML = render(messageInput.value);
  });

  function setReplyTo(commentId, name) {
    currentReplyTo = commentId;
    replyToName.textContent = name || 'Anonymous';
    replyInfo.style.display = 'block';
    messageInput.focus();
  }

  function cancelReply() {
    currentReplyTo = null;
    replyInfo.style.display = 'none';
  }

  cancelReplyBtn.addEventListener('click', cancelReply);
  async function loadComments() {
    const res = await fetch(`${API_URL}/comments?post=${POST}`);
    const data = await res.json();

    // no replyTo means it's a root comment
    const rootComments = data.filter((c) => !c.replyTo);

    const commentMap = {};
    data.forEach((comment) => {
      commentMap[comment.id] = comment;
    });
    function getAllReplies(commentId) {
      // find all comments that reply to the given commentId
      const directReplies = data.filter((c) => c.replyTo === commentId);

      // find all replies for each direct reply
      const allReplies = [...directReplies];
      directReplies.forEach((reply) => {
        // find replies to the reply
        const subReplies = getAllReplies(reply.id);
        allReplies.push(...subReplies);
      });

      return allReplies;
    }

    commentsEl.innerHTML = rootComments
      .map((rootComment) => {
        const allReplies = getAllReplies(rootComment.id);
        const repliesHtml = allReplies
          .map((reply) => {
            const replyToComment = commentMap[reply.replyTo];
            const replyToName = replyToComment
              ? replyToComment.name || 'Anonymous'
              : '';

            return `
          <div class="reply">
            <div class="reply-header">
              <span class="reply-name" title="${reply.id}">${DOMPurify.sanitize(reply.name) || 'Anonymous'}</span>
              <span class="reply-time">${formatDate(reply.pubDate)}</span>
              ${replyToName ? `<span class="reply-to">回覆給 <span title="${reply.replyTo}">${DOMPurify.sanitize(replyToName)}</span></span>` : ''}
            </div>
            <div class="reply-content">${render(reply.msg)}</div>
            <button class="reply-button" data-id="${reply.id}" data-name="${DOMPurify.sanitize(reply.name) || 'Anonymous'}">回覆</button>
          </div>
        `;
          })
          .join('');
        return `
        <div class="comment" data-id="${rootComment.id}">
          <div class="comment-header">
            <span class="comment-name" title="${rootComment.id}">${DOMPurify.sanitize(rootComment.name) || 'Anonymous'}</span>
            <span class="comment-time">${formatDate(rootComment.pubDate)}</span>
          </div>
          <div class="comment-content">${render(rootComment.msg)}</div>
          <button class="reply-button" data-id="${rootComment.id}" data-name="${DOMPurify.sanitize(rootComment.name) || 'Anonymous'}">回覆</button>
          <div class="replies">
            ${repliesHtml}
          </div>
        </div>
      `;
      })
      .join('');

    // reply button
    document.querySelectorAll('.reply-button').forEach((button) => {
      button.addEventListener('click', () => {
        const commentId = button.getAttribute('data-id');
        const name = button.getAttribute('data-name');
        setReplyTo(commentId, name);
      });
    });
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    await fetch(`${API_URL}/comments?post=${POST}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: form.name.value,
        // email: form.email.value,
        msg: form.message.value,
        replyTo: currentReplyTo,
      }),
    });
    form.reset();
    preview.textContent = '';
    cancelReply();
    loadComments();
  });

  loadComments();
</script>
